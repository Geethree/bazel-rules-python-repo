# See the bazel central registry for information on dependencies
# https://registry.bazel.build/
bazel_dep(name = "aspect_rules_lint", version = "0.10.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "gazelle", version = "0.35.0")
bazel_dep(name = "rules_python", version = "0.29.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.29.0")

################
#### Python ####
################

PYTHON_VERSION = "3.10"

# The following stanze returns a proxy object representing a module extension;
# its methods can be invoked to create module extension tags.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = PYTHON_VERSION,
)

# # Use the extension, pip.parse, to call the `pip_repository` rule that invokes
# # `pip`, with `incremental` set. The pip call accepts a locked/compiled
# # requirements file and installs the dependencies listed within.
# # Those dependencies become available in a generated `requirements.bzl` file.
# # You can instead check this `requirements.bzl` file into your repo.
# # Because this project has different requirements for windows vs other
# # operating systems, we have requirements for each.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    # The interpreter_target attribute points to the interpreter to
    # use for running pip commands to download the packages in the
    # requirements file.
    # As a best practice, we use the same interpreter as the toolchain
    # that was configured above; this ensures the same Python version
    # is used for both resolving dependencies and running tests/binaries.
    # If this isn't specified, then you'll get whatever is locally installed
    # on your system.
    hub_name = "pip_common",
    python_version = PYTHON_VERSION,
    requirements_lock = "//src/project_a:requirements.txt",
)

pip.parse(
    hub_name = "pip_gpu",
    python_version = PYTHON_VERSION,
    requirements_lock = "//src/project_a/gpu_only_deps:requirements.txt",
)

# Imports the pip toolchain generated by the given module extension into the scope of the current module.
use_repo(
    pip,
    "pip_common",
    "pip_gpu"
)
