load("@pip//:requirements.bzl", "all_requirements", "all_whl_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")

# This stanza calls a rule that generates targets for managing pip dependencies
# with pip-compile.
# bazel run //third_party/python:requirements.update
# bazel test //third_party/python:requirements_test
compile_pip_requirements(
    name = "requirements",
    timeout = "moderate",
    requirements_darwin = ":requirements_darwin.txt",
    requirements_in = ":requirements.in",
    requirements_linux = ":requirements_linux.txt",
    requirements_txt = ":requirements.txt",
    requirements_windows = ":requirements_windows.txt",
)

# This repository rule fetches the metadata for python packages we
# depend on. That data is required for the gazelle_python_manifest
# rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //third_party/python:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //third_party/python:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
# This target updates a file called gazelle_python.yaml, and
# requires that file exist before the target is run.
# When you are using gazelle you need to run this target first.
gazelle_python_manifest(
    name = "gazelle_python",
    manifest = "//:gazelle_python.yaml",
    modules_mapping = ":modules_map",
    pip_repository_name = "pip",
    requirements = [
        ":requirements.txt",
        ":requirements_darwin.txt",
        ":requirements_linux.txt",
        ":requirements_windows.txt",
    ],
)
